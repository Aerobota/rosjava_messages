/*
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

dependencies {
  compile project(':message_generator')
}

def generatedSourcesDir = "${buildDir}/generated-src"
def List<String> packageList = new ArrayList<String>()
packageList.add("std_msgs")
packageList.add("rosgraph_msgs")

task generateSources(type: JavaExec) {
    description "Generate all pkg sources and store in build/generated-src"
    outputs.dir file(generatedSourcesDir)
    args new ArrayList<String>([ generatedSourcesDir ] +  packageList)
    classpath = configurations.runtime
    main = 'org.ros.internal.message.GenerateInterfaces'
}
configurations {
    messageArchives {
        description = 'generated message sources for ${packageList}.'
    }
}

packageList.each { pkg ->
    configurations {
        "${pkg}" {
            description = 'generated message sources for ${pkg}'
        }
    }
    /* Once sourceSets are defined, java will add compileXYZJava, XYZClasses tasks */ 
    sourceSets {
        "${pkg}" {
            java {
                srcDir generatedSourcesDir + "/${pkg}"
            }
            if ( pkg == 'rosgraph_msgs' ) {
                compileClasspath += std_msgs.output
            }
        }
    }
    def funnyPkgName=pkg.capitalize()
    tasks["compile${funnyPkgName}Java"].dependsOn generateSources
    if ( pkg == 'rosgraph_msgs' ) {
        tasks["compile${funnyPkgName}Java"].dependsOn compileStd_msgsJava    
    }

    dependencies {
      "${pkg}Compile" project(':message_generator')
      "${pkg}Runtime" project(':message_generator')
      if ( pkg == 'rosgraph_msgs' ) {
          "${pkg}Compile" project(':message_generator')
      }
    }
    task "${pkg}Jar"(type: Jar) {
        baseName "${pkg}"
        from sourceSets["${pkg}"].output
    }
    artifacts {
        messageArchives tasks["${pkg}Jar"]
    }
}

uploadMessageArchives {
    repositories {
        mavenDeployer {
            repository(url: 'file:///home/snorri/tmp/maven')
            packageList.each { pkg ->
                addFilter("${pkg}") { artifact, file ->
                    artifact.name == "${pkg}"
                }
            }
        }
    }
}

task dude {
    configurations.each { c ->
        println c
    }
    configurations.findAll().each { config ->
            println "${config}:"
            config.allArtifacts.getFiles().each { file -> println "  Artifact: " + file}
            config.allDependencies.each { dep -> println "  Dependency: " + dep}
            println ' '
        }
}

eclipse.classpath.file {
  withXml {
    // TODO(damonkohler): Avoid repetition of build directory. This is
    // necessary because Eclipse wants a project relative path.
    it.asNode().appendNode('classpathentry', [kind: 'src', path: 'build/generated-src'])
  }
}
